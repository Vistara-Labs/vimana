// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: spacecore.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PluginRegistry_RegisterPlugin_FullMethodName  = "/pb.PluginRegistry/RegisterPlugin"
	PluginRegistry_DiscoverPlugins_FullMethodName = "/pb.PluginRegistry/DiscoverPlugins"
	PluginRegistry_GetPlugin_FullMethodName       = "/pb.PluginRegistry/GetPlugin"
)

// PluginRegistryClient is the client API for PluginRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginRegistryClient interface {
	RegisterPlugin(ctx context.Context, in *RegisterPluginRequest, opts ...grpc.CallOption) (*RegisterPluginResponse, error)
	DiscoverPlugins(ctx context.Context, in *DiscoverPluginsRequest, opts ...grpc.CallOption) (*DiscoverPluginsResponse, error)
	GetPlugin(ctx context.Context, in *GetPluginRequest, opts ...grpc.CallOption) (*GetPluginResponse, error)
}

type pluginRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginRegistryClient(cc grpc.ClientConnInterface) PluginRegistryClient {
	return &pluginRegistryClient{cc}
}

func (c *pluginRegistryClient) RegisterPlugin(ctx context.Context, in *RegisterPluginRequest, opts ...grpc.CallOption) (*RegisterPluginResponse, error) {
	out := new(RegisterPluginResponse)
	err := c.cc.Invoke(ctx, PluginRegistry_RegisterPlugin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginRegistryClient) DiscoverPlugins(ctx context.Context, in *DiscoverPluginsRequest, opts ...grpc.CallOption) (*DiscoverPluginsResponse, error) {
	out := new(DiscoverPluginsResponse)
	err := c.cc.Invoke(ctx, PluginRegistry_DiscoverPlugins_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginRegistryClient) GetPlugin(ctx context.Context, in *GetPluginRequest, opts ...grpc.CallOption) (*GetPluginResponse, error) {
	out := new(GetPluginResponse)
	err := c.cc.Invoke(ctx, PluginRegistry_GetPlugin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginRegistryServer is the server API for PluginRegistry service.
// All implementations should embed UnimplementedPluginRegistryServer
// for forward compatibility
type PluginRegistryServer interface {
	RegisterPlugin(context.Context, *RegisterPluginRequest) (*RegisterPluginResponse, error)
	DiscoverPlugins(context.Context, *DiscoverPluginsRequest) (*DiscoverPluginsResponse, error)
	GetPlugin(context.Context, *GetPluginRequest) (*GetPluginResponse, error)
}

// UnimplementedPluginRegistryServer should be embedded to have forward compatible implementations.
type UnimplementedPluginRegistryServer struct {
}

func (UnimplementedPluginRegistryServer) RegisterPlugin(context.Context, *RegisterPluginRequest) (*RegisterPluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPlugin not implemented")
}
func (UnimplementedPluginRegistryServer) DiscoverPlugins(context.Context, *DiscoverPluginsRequest) (*DiscoverPluginsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverPlugins not implemented")
}
func (UnimplementedPluginRegistryServer) GetPlugin(context.Context, *GetPluginRequest) (*GetPluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlugin not implemented")
}

// UnsafePluginRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginRegistryServer will
// result in compilation errors.
type UnsafePluginRegistryServer interface {
	mustEmbedUnimplementedPluginRegistryServer()
}

func RegisterPluginRegistryServer(s grpc.ServiceRegistrar, srv PluginRegistryServer) {
	s.RegisterService(&PluginRegistry_ServiceDesc, srv)
}

func _PluginRegistry_RegisterPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginRegistryServer).RegisterPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginRegistry_RegisterPlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginRegistryServer).RegisterPlugin(ctx, req.(*RegisterPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginRegistry_DiscoverPlugins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverPluginsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginRegistryServer).DiscoverPlugins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginRegistry_DiscoverPlugins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginRegistryServer).DiscoverPlugins(ctx, req.(*DiscoverPluginsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginRegistry_GetPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginRegistryServer).GetPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginRegistry_GetPlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginRegistryServer).GetPlugin(ctx, req.(*GetPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PluginRegistry_ServiceDesc is the grpc.ServiceDesc for PluginRegistry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PluginRegistry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PluginRegistry",
	HandlerType: (*PluginRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterPlugin",
			Handler:    _PluginRegistry_RegisterPlugin_Handler,
		},
		{
			MethodName: "DiscoverPlugins",
			Handler:    _PluginRegistry_DiscoverPlugins_Handler,
		},
		{
			MethodName: "GetPlugin",
			Handler:    _PluginRegistry_GetPlugin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spacecore.proto",
}
